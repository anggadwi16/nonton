// Mocks generated by Mockito 5.0.8 from annotations
// in ditonton/test/presentation/pages/tv_detail_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloc/src/bloc.dart' as _i7;
import 'package:bloc/src/transition.dart' as _i6;
import 'package:ditonton/domain/entities/tv.dart' as _i5;
import 'package:ditonton/domain/entities/tv_detail.dart' as _i2;
import 'package:ditonton/presentation/bloc/tv_detail_bloc.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTvDetail extends _i1.Fake implements _i2.TvDetail {}

class _FakeTvDetailState extends _i1.Fake implements _i3.TvDetailState {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

/// A class which mocks [TvDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvDetailBloc extends _i1.Mock implements _i3.TvDetailBloc {
  MockTvDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvDetail get tv =>
      (super.noSuchMethod(Invocation.getter(#tv), returnValue: _FakeTvDetail())
          as _i2.TvDetail);
  @override
  List<_i5.Tv> get recommendation =>
      (super.noSuchMethod(Invocation.getter(#recommendation),
          returnValue: <_i5.Tv>[]) as List<_i5.Tv>);
  @override
  bool get isAddedWatchlist =>
      (super.noSuchMethod(Invocation.getter(#isAddedWatchlist),
          returnValue: false) as bool);
  @override
  _i3.TvDetailState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTvDetailState()) as _i3.TvDetailState);
  @override
  _i4.Stream<_i3.TvDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.TvDetailState>.empty())
          as _i4.Stream<_i3.TvDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i4.Stream<_i3.TvDetailState> mapEventToState(_i3.TvDetailEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i3.TvDetailState>.empty())
          as _i4.Stream<_i3.TvDetailState>);
  @override
  void add(_i3.TvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.TvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i6.Transition<_i3.TvDetailEvent, _i3.TvDetailState>> transformEvents(
          _i4.Stream<_i3.TvDetailEvent>? events,
          _i7.TransitionFunction<_i3.TvDetailEvent, _i3.TvDetailState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i6.Transition<_i3.TvDetailEvent, _i3.TvDetailState>>.empty())
          as _i4.Stream<_i6.Transition<_i3.TvDetailEvent, _i3.TvDetailState>>);
  @override
  void emit(_i3.TvDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.TvDetailEvent>(
          _i7.EventHandler<E, _i3.TvDetailState>? handler,
          {_i7.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i6.Transition<_i3.TvDetailEvent, _i3.TvDetailState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<_i6.Transition<_i3.TvDetailEvent, _i3.TvDetailState>>
      transformTransitions(
              _i4.Stream<_i6.Transition<_i3.TvDetailEvent, _i3.TvDetailState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i6.Transition<_i3.TvDetailEvent, _i3.TvDetailState>>.empty())
              as _i4
                  .Stream<_i6.Transition<_i3.TvDetailEvent, _i3.TvDetailState>>);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.StreamSubscription<_i3.TvDetailState> listen(
          void Function(_i3.TvDetailState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<_i3.TvDetailState>())
          as _i4.StreamSubscription<_i3.TvDetailState>);
  @override
  void onChange(_i6.Change<_i3.TvDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
